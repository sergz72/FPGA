00040000 // 0000 jmp start
004446f4 // 0001     out [timer_interrupt_clear_address], one
004445f4 // 0002     out [timer_interrupt_clear_address], zero
00000050 // 0003     reti
4000405d // 0004     mov frequency_code_address, FREQUENCY_CODE_ADDRESS
0000435d // 0005     mov display_controller_address, DISPLAY_CONTROLLER_ADDRESS
c000445d // 0006     mov timer_interrupt_clear_address, TIMER_INTERRUPT_CLEAR_ADDRESS
0000455d // 0007     clr zero
0001465d // 0008     mov one, 1
00640020 // 0009     call hd_init
00220020 // 000a     call set_channel0
0000005f // 000b     hlt
002a0020 // 000c     call prepare_adc_data
47470060 // 000d     test current_channel, current_channel
00120003 // 000e     jmpz to_freq_data
00c0115d // 000f     mov r17, $C0 ; second row
3000005a // 0010     mov rp, 48
005a0020 // 0011     call show_row
014042f0 // 0012     in frequency_code_hi, [frequency_code_address+1]
80004280 // 0013     test frequency_code_hi, $8000
001c0003 // 0014     jmpz change_channel
004041f0 // 0015     in frequency_code_lo, [frequency_code_address]
014042f0 // 0016     in frequency_code_hi, [frequency_code_address+1]
7fff4288 // 0017     and frequency_code_hi, $7FFF
00450020 // 0018     call prepare_freq_data
0080115d // 0019     mov r17, $80 ; first row
2000005a // 001a     mov rp, 32
005a0020 // 001b     call show_row
47470060 // 001c     test current_channel, current_channel
00200003 // 001d     jmpz set_ch1
00220020 // 001e     call set_channel0
000b0000 // 001f     jmp main_loop
00270020 // 0020     call set_channel1    
000b0000 // 0021     jmp main_loop
0000475d // 0022     clr current_channel
0018115d // 0023     mov r17, MCP3426_CHANNEL0_CODE
00d0105d // 0024     mov r16, MCP3426_ADDRESS
00ac0020 // 0025     call i2c_master_write1
00000040 // 0026     ret
0001475d // 0027     mov current_channel, 1
0038115d // 0028     mov r17, MCP3426_CHANNEL1_CODE
00240000 // 0029     jmp set_channel
47470060 // 002a     test current_channel, current_channel
00340003 // 002b     jmpz prepare_adc_data_channel0
00563d5d // 002c     mov r61, 86 ; 'V'
00323e5d // 002d     mov r62, 50 ; '2'
00343f5d // 002e     mov r63, 52 ; '4'
3d00005a // 002f     mov rp, 61
00d0105d // 0030     mov r16, MCP3426_ADDRESS
003d0020 // 0031     call get_adc_channel_data
00370020 // 0032     call save_adc_channel_data
00000040 // 0033     ret
0056365d // 0034     mov r54, 86 ; 'V'
3600005a // 0035     mov rp, 54
00300000 // 0036     jmp adc_get_save
000a125d // 0037     mov r18, 10
00530020 // 0038     call save31
002e00e2 // 0039     mov @--rp, '.'
0002165d // 003a     mov r22, 2
00540020 // 003b     call save32
00000040 // 003c     ret
00bb0020 // 003d     call i2c_master_read2
0c35105d // 003e     mov r16, V_MUL
00cf0020 // 003f     call mul1616
0012105e // 0040     mov r16, r18
0013115e // 0041     mov r17, r19
2710125d // 0042     mov r18, V_DIV
00c30020 // 0043     call div3216
00000040 // 0044     ret
00482e5d // 0045     mov r46, 72 ; 'H'
007a2f5d // 0046     mov r47, 122 ; 'z'
002e2a5d // 0047     mov r42, 46 ; .
002e265d // 0048     mov r38, 46 ; .
0020225d // 0049     mov r34, 32 ; space
0020215d // 004a     mov r33, 32 ; space
0020205d // 004b     mov r32, 32 ; space
000a125d // 004c     mov r18, 10
0042115e // 004d     mov r17, frequency_code_hi
0041105e // 004e     mov r16, frequency_code_lo
2e00005a // 004f     mov rp, 46
00530020 // 0050     call save31
00520020 // 0051     call save3
00000059 // 0052     dec rp
0003165d // 0053     mov r22, 3
00c30020 // 0054     call div3216
00301382 // 0055     add r19, '0'
000013e6 // 0056     mov @--rp, r19
ffff1682 // 0057     dec r22
00540004 // 0058     jmpnz save32
00000040 // 0059     ret
0010105d // 005a     mov r16, 16
014311f4 // 005b     out [display_controller_address+DISPLAY_CONTROLLER_E], r17
004311f4 // 005c     out [display_controller_address], r17
007a0020 // 005d     call hd_delay
034300f5 // 005e     out [display_controller_address+DISPLAY_CONTROLLER_RS+DISPLAY_CONTROLLER_E], @rp
024300f6 // 005f     out [display_controller_address+DISPLAY_CONTROLLER_RS], @rp++
007a0020 // 0060     call hd_delay
ffff1082 // 0061     dec r16
005e0004 // 0062     jmpnz show_row2
00000040 // 0063     ret
0038115d // 0064     mov r17, $38 ; 2 rows
014311f4 // 0065     out [display_controller_address+DISPLAY_CONTROLLER_E], r17
004311f4 // 0066     out [display_controller_address], r17
0212105d // 0067     mov r16, 5 * DELAY_MS_OPS
007b0020 // 0068     call delay
014311f4 // 0069     out [display_controller_address+DISPLAY_CONTROLLER_E], r17
004311f4 // 006a     out [display_controller_address], r17
006a105d // 006b     mov r16, 1 * DELAY_MS_OPS
007b0020 // 006c     call delay
014311f4 // 006d     out [display_controller_address+DISPLAY_CONTROLLER_E], r17
004311f4 // 006e     out [display_controller_address], r17
007a0020 // 006f     call hd_delay
014311f4 // 0070     out [display_controller_address+DISPLAY_CONTROLLER_E], r17
004311f4 // 0071     out [display_controller_address], r17
0001115d // 0072     mov r17, 1 ; clear display
014311f4 // 0073     out [display_controller_address+DISPLAY_CONTROLLER_E], r17
004311f4 // 0074     out [display_controller_address], r17
00d4105d // 0075     mov r16, 2 * DELAY_MS_OPS
007b0020 // 0076     call delay
000c115d // 0077     mov r17, $0C ; display on
014311f4 // 0078     out [display_controller_address+DISPLAY_CONTROLLER_E], r17
004311f4 // 0079     out [display_controller_address], r17
00000040 // 007a     ret
ffff1082 // 007b     dec r16
007b0004 // 007c     jmpnz delay
00000040 // 007d     ret
00801080 // 007e     test r16, $80
00820004 // 007f     jmpnz i2c_send1
0000135d // 0080     clr r19
00830000 // 0081     jmp i2c_send2
0001135d // 0082     mov r19, SDA_BIT
001413f4 // 0083     out [r20], r19
00021389 // 0084     or r19, SCL_BIT
001413f4 // 0085     out [r20], r19 ; scl high
fffd1388 // 0086     and r19, ~SCL_BIT
001413f4 // 0087     out [r20], r19 ; scl low
00000040 // 0088     ret
0008155d // 0089     mov r21, 8
007e0020 // 008a     call i2c_send_bit
00011086 // 008b     shl r16, 1
ffff1582 // 008c     dec r21
008a0004 // 008d     jmpnz i2c_send_byte_loop
0080105d // 008e     mov r16, $80
007e0020 // 008f     call i2c_send_bit ; ack
00000040 // 0090     ret
0003135d // 0091     mov r19, SCL_BIT | SDA_BIT
001413f4 // 0092     out [r20], r19 ; scl high, sda high
001412f0 // 0093     in r18, [r20]
00011288 // 0094     and r18, SDA_BIT
12101069 // 0095     or  r16, r16, r18
fffd1388 // 0096     and r19, ~SCL_BIT
001413f4 // 0097     out [r20], r19 ; scl low
00000040 // 0098     ret
0008155d // 0099     mov r21, 8
0000105d // 009a     clr r16
00011086 // 009b     shl r16, 1
00910020 // 009c     call i2c_read_bit
ffff1582 // 009d     dec r21
009b0004 // 009e     jmpnz i2c_read_byte_loop
0010125e // 009f     mov  r18, r16
0000105d // 00a0     clr  r16
007e0020 // 00a1     call i2c_send_bit ; ack
0001135d // 00a2     mov r19, SDA_BIT
001413f4 // 00a3     out [r20], r19 ; sda high
00000040 // 00a4     ret
8000145d // 00a5     mov r20, I2C_PORT_ADDRESS
0002135d // 00a6     mov r19, SCL_BIT
001413f4 // 00a7     out [r20], r19
0000135d // 00a8     clr r19
001413f4 // 00a9     out [r20], r19 ; scl low
00890020 // 00aa     call i2c_send_byte
00000040 // 00ab     ret
00a50020 // 00ac     call i2c_start
00b20000 // 00ad     jmp i2c_w1
00a50020 // 00ae     call i2c_start
0011105e // 00af     mov r16, byte12
00890020 // 00b0     call i2c_send_byte
00081187 // 00b1     shr byte12, 8
0011105e // 00b2     mov r16, byte12
00890020 // 00b3     call i2c_send_byte
0000135d // 00b4     clr r19
001413f4 // 00b5     out [r20], r19 ; sda low
0002135d // 00b6     mov r19, SCL_BIT
001413f4 // 00b7     out [r20], r19 ; scl high
0003135d // 00b8     mov r19, SCL_BIT | SDA_BIT
001413f4 // 00b9     out [r20], r19 ; sda high
00000040 // 00ba     ret
00011089 // 00bb     or   r16, 1
00a50020 // 00bc     call i2c_start
00990020 // 00bd     call i2c_read_byte
0012115e // 00be     mov r17, r18
00081186 // 00bf     shl r17, 8
00990020 // 00c0     call i2c_read_byte
12111169 // 00c1     or r17, r17, r18
00b40000 // 00c2     jmp i2c_stop
0000135d // 00c3 div3216:    clr   R19
0020155d // 00c4 			mov   R21, 32
0010106f // 00c5 div_l2:		shlc  R16, R16
0011116d // 00c6 			rlc   R17, R17
0013136d // 00c7 			rlc	  R19, R19
12131464 // 00c8 			sub   R20, R19, R18
00cc0007 // 00c9 			jmpmi div_l1
00011089 // 00ca 			or    R16, 1
0014135e // 00cb 			mov   R19, R20
ffff1582 // 00cc div_l1:		dec   R21
00000043 // 00cd 			retz
00c50000 // 00ce 			jmp   div_l2
10100060 // 00cf     test r16, r16
00000043 // 00d0     retz
0000125d // 00d1     clr r18
0000135d // 00d2     clr r19
0000145d // 00d3     clr r20
00011180 // 00d4     test r17, 1
00d80003 // 00d5     jmpz mul1616_next
10121262 // 00d6     add r18, r18, r16
14131363 // 00d7     adc r19, r19, r20
0010106f // 00d8     shlc r16, r16
0014146d // 00d9     rlc  r20, r20
00011187 // 00da     shr  r17, 1
00d40004 // 00db     jmpnz mul1616_next2
00000040 // 00dc     ret
