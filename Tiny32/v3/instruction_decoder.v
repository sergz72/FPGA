`include "tiny32.vh"

`define REGISTERS_WR 1
`define LOAD 2
`define STORE_0 4
`define STORE_1 8
`define STORE_2 'h10
`define STORE_3 'h20
`define ERR 'h40
`define SET_PC 'h80
`define PC_SOURCE_0 'h100
`define PC_SOURCE_1 'h200
`define REGISTERS_WR_DATA_SOURCE_0 'h400
`define REGISTERS_WR_DATA_SOURCE_1 'h800
`define ALU_CLK 'h1000
`define ALU_OP1_SOURCE_0 'h2000
`define ALU_OP1_SOURCE_1 'h4000
`define ALU_OP2_SOURCE_0 'h8000
`define ALU_OP2_SOURCE_1 'h10000
`define ALU_OP2_SOURCE_2 'h20000
`define ALU_OP_0 'h40000
`define ALU_OP_1 'h80000
`define ALU_OP_2 'h100000
`define ALU_OP_3 'h200000
`define DATA_SELECTOR_0 'h400000
`define DATA_SELECTOR_1 'h800000
`define DATA_SELECTOR_2 'h1000000
`define DATA_SELECTOR_3 'h2000000
`define HLT 'h4000000
`define WFI_ 'h8000000

`define PC_SOURCE_PC_PLUS_IMM12B 0
`define PC_SOURCE_PC_PLUS_IMM20J `PC_SOURCE_0
`define PC_SOURCE_SOURCE1_REG_DATA_PLUS_IMM12I (`PC_SOURCE_0 * 2)
`define PC_SOURCE_SAVED_PC (`PC_SOURCE_0 * 3)

`define REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F 0
`define REGISTERS_WR_DATA_SOURCE_ALU_OUT `REGISTERS_WR_DATA_SOURCE_0
`define REGISTERS_WR_DATA_SOURCE_C (`REGISTERS_WR_DATA_SOURCE_0 * 2)
`define REGISTERS_WR_DATA_SOURCE_SIGNED_LT (`REGISTERS_WR_DATA_SOURCE_0 * 3)

`define ALU_OP1_SOURCE_SOURCE1_REG_DATA 0
`define ALU_OP1_SOURCE_IMM20U `ALU_OP1_SOURCE_0
`define ALU_OP1_SOURCE_4 (`ALU_OP1_SOURCE_0 * 2)

`define ALU_OP2_SOURCE_IMM12I 0
`define ALU_OP2_SOURCE_IMM12I_SIGNED `ALU_OP2_SOURCE_0
`define ALU_OP2_SOURCE_SOURCE2_REG_DATA (`ALU_OP2_SOURCE_0 * 2)
`define ALU_OP2_SOURCE_SOURCE2_REG_DATA40 (`ALU_OP2_SOURCE_0 * 3)
`define ALU_OP2_SOURCE_PC (`ALU_OP2_SOURCE_0 * 4)
`define ALU_OP2_SOURCE_ZERO (`ALU_OP2_SOURCE_0 * 5)
`define ALU_OP2_SOURCE_RS2 (`ALU_OP2_SOURCE_0 * 6)

`define DATA_SELECTOR_BYTE1_SIGNED 0
`define DATA_SELECTOR_BYTE1_UNSIGNED `DATA_SELECTOR_0
`define DATA_SELECTOR_BYTE2_SIGNED (`DATA_SELECTOR_0 * 2)
`define DATA_SELECTOR_BYTE2_UNSIGNED (`DATA_SELECTOR_0 * 3)
`define DATA_SELECTOR_BYTE3_SIGNED (`DATA_SELECTOR_0 * 4)
`define DATA_SELECTOR_BYTE3_UNSIGNED (`DATA_SELECTOR_0 * 5)
`define DATA_SELECTOR_BYTE4_SIGNED (`DATA_SELECTOR_0 * 6)
`define DATA_SELECTOR_BYTE4_UNSIGNED (`DATA_SELECTOR_0 * 7)
`define DATA_SELECTOR_HALF1_SIGNED (`DATA_SELECTOR_0 * 8)
`define DATA_SELECTOR_HALF1_UNSIGNED (`DATA_SELECTOR_0 * 9)
`define DATA_SELECTOR_HALF2_SIGNED (`DATA_SELECTOR_0 * 10)
`define DATA_SELECTOR_HALF2_UNSIGNED (`DATA_SELECTOR_0 * 11)
`define DATA_SELECTOR_WORD (`DATA_SELECTOR_0 * 12)

`define DATA_WORD 0
`define DATA_BYTE2 `DATA_SELECTOR_0
`define DATA_HALF2 (`DATA_SELECTOR_0 * 2)
`define DATA_BYTE4 (`DATA_SELECTOR_0 * 3)

`define NOSTORE (15 * `STORE_0)

`define NOP (`REGISTERS_WR | `NOSTORE)
`define ERROR (`ERR | `NOP)

`define ALU_OP_SL 0
`define ALU_OP_SR `ALU_OP_0
`define ALU_OP_SRA (`ALU_OP_0 * 2)
`define ALU_OP_AND (`ALU_OP_0 * 3)
`define ALU_OP_OR (`ALU_OP_0 * 4)
`define ALU_OP_XOR (`ALU_OP_0 * 5)
`define ALU_OP_ADD (`ALU_OP_0 * 6)
`define ALU_OP_SUB (`ALU_OP_0 * 7)
`define ALU_OP_MUL (`ALU_OP_0 * 8)
`define ALU_OP_MULH (`ALU_OP_0 * 9)
`define ALU_OP_MULHSU (`ALU_OP_0 * 10)
`define ALU_OP_MULHU (`ALU_OP_0 * 11)
`define ALU_OP_DIV (`ALU_OP_0 * 12)
`define ALU_OP_DIVU (`ALU_OP_0 * 13)
`define ALU_OP_REM (`ALU_OP_0 * 14)
`define ALU_OP_REMU (`ALU_OP_0 * 15)

`define LB1 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE1_SIGNED)
`define LB2 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE2_SIGNED)
`define LB3 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE3_SIGNED)
`define LB4 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE4_SIGNED)
`define LH1 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_HALF1_SIGNED)
`define LH2 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_HALF2_SIGNED)
`define LW (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_WORD)
`define LBU1 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE1_UNSIGNED)
`define LBU2 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE2_UNSIGNED)
`define LBU3 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE3_UNSIGNED)
`define LBU4 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_BYTE4_UNSIGNED)
`define LHU1 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_HALF1_UNSIGNED)
`define LHU2 (`NOSTORE | `LOAD | `REGISTERS_WR_DATA_SOURCE_DATA_LOAD_F | `DATA_SELECTOR_HALF2_UNSIGNED)

`define ADDI (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_IMM12I_SIGNED)
`define SLLI (`NOSTORE | `ALU_OP_SL | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_RS2)
`define SLTI (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_SIGNED_LT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_IMM12I_SIGNED)
`define SLTIU (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_C | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_IMM12I_SIGNED)
`define XORI (`NOSTORE | `ALU_OP_XOR | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_IMM12I_SIGNED)
`define SRLI (`NOSTORE | `ALU_OP_SR | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_RS2)
`define SRAI (`NOSTORE | `ALU_OP_SRA | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_RS2)
`define ORI (`NOSTORE | `ALU_OP_OR | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_IMM12I_SIGNED)
`define ANDI (`NOSTORE | `ALU_OP_AND | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_IMM12I_SIGNED)

`define ADD (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define SUB (`NOSTORE | `ALU_OP_SUB | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define SLL (`NOSTORE | `ALU_OP_SL | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA40)
`define SLT (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_SIGNED_LT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define SLTU (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_C | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define XOR (`NOSTORE | `ALU_OP_XOR | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define SRL (`NOSTORE | `ALU_OP_SR | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA40)
`define SRA (`NOSTORE | `ALU_OP_SRA | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA40)
`define OR (`NOSTORE | `ALU_OP_OR | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define AND (`NOSTORE | `ALU_OP_AND | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)

`define MUL (`NOSTORE | `ALU_OP_MUL | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define MULH (`NOSTORE | `ALU_OP_MULH | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define MULHSU (`NOSTORE | `ALU_OP_MULHSU | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define MULHU (`NOSTORE | `ALU_OP_MULHU | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define DIV (`NOSTORE | `ALU_OP_DIV | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define DIVU (`NOSTORE | `ALU_OP_DIVU | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define REM (`NOSTORE | `ALU_OP_REM | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define REMU (`NOSTORE | `ALU_OP_REMU | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)

`define AUIPC (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_IMM20U | `ALU_OP2_SOURCE_PC)

`define SB1 (`REGISTERS_WR | ('hE * `STORE_0) | `DATA_WORD)
`define SB2 (`REGISTERS_WR | ('hD * `STORE_0) | `DATA_BYTE2)
`define SB3 (`REGISTERS_WR | ('hB * `STORE_0) | `DATA_HALF2)
`define SB4 (`REGISTERS_WR | ('h7 * `STORE_0) | `DATA_BYTE4)
`define SH1 (`REGISTERS_WR | ('hC * `STORE_0) | `DATA_WORD)
`define SH2 (`REGISTERS_WR | ('h3 * `STORE_0) | `DATA_HALF2)
`define SW (`REGISTERS_WR | `DATA_WORD)

`define LUI (`NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_IMM20U | `ALU_OP2_SOURCE_ZERO)

`define BR (`REGISTERS_WR | `SET_PC | `PC_SOURCE_PC_PLUS_IMM12B | `NOSTORE | `ALU_OP_SUB | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_SOURCE1_REG_DATA | `ALU_OP2_SOURCE_SOURCE2_REG_DATA)
`define JALR (`SET_PC | `PC_SOURCE_SOURCE1_REG_DATA_PLUS_IMM12I | `NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_4 | `ALU_OP2_SOURCE_PC)
`define JAL (`SET_PC | `PC_SOURCE_PC_PLUS_IMM20J | `NOSTORE | `ALU_OP_ADD | `ALU_CLK | `REGISTERS_WR_DATA_SOURCE_ALU_OUT | `ALU_OP1_SOURCE_4 | `ALU_OP2_SOURCE_PC)

`define HALT (`HLT | `NOP)
`define RETI (`NOP | `SET_PC | `PC_SOURCE_SAVED_PC)
`define WFI (`WFI_ | `NOP)

module instruction_decoder
#(parameter MICROCODE_WIDTH = 28)
(
    input wire [31:0] instruction,
    input wire [1:0] source_address_i,
    input wire [1:0] source_address_s,
    output wire [MICROCODE_WIDTH - 1:0] decoded_instruction
);

    function [MICROCODE_WIDTH - 1:0] decoder(input [6:0] op, input[2:0] func3, input[6:0] func7, input [1:0] source_addr_i, input [1:0] source_addr_s);
        casez ({op, func3, func7, source_addr_i, source_addr_s})
            21'b0000011_000_???????_00_??: decoder = `LB1;
            21'b0000011_000_???????_01_??: decoder = `LB2;
            21'b0000011_000_???????_10_??: decoder = `LB3;
            21'b0000011_000_???????_11_??: decoder = `LB4;
            21'b0000011_001_???????_00_??: decoder = `LH1;
            21'b0000011_001_???????_10_??: decoder = `LH2;
            21'b0000011_010_???????_00_??: decoder = `LW;
            21'b0000011_100_???????_00_??: decoder = `LBU1;
            21'b0000011_100_???????_01_??: decoder = `LBU2;
            21'b0000011_100_???????_10_??: decoder = `LBU3;
            21'b0000011_100_???????_11_??: decoder = `LBU4;
            21'b0000011_101_???????_00_??: decoder = `LHU1;
            21'b0000011_101_???????_10_??: decoder = `LHU2;

            21'b0001011_000_???????_??_??: decoder = `WFI;
            21'b0001011_001_???????_??_??: decoder = `RETI;
            21'b0001011_010_???????_??_??: decoder = `HALT;

            21'b0010011_000_???????_??_??: decoder = `ADDI;
            21'b0010011_001_0000000_??_??: decoder = `SLLI;
            21'b0010011_010_???????_??_??: decoder = `SLTI;
            21'b0010011_011_???????_??_??: decoder = `SLTIU;
            21'b0010011_100_???????_??_??: decoder = `XORI;
            21'b0010011_101_0000000_??_??: decoder = `SRLI;
            21'b0010011_101_0100000_??_??: decoder = `SRAI;
            21'b0010011_110_???????_??_??: decoder = `ORI;
            21'b0010011_111_???????_??_??: decoder = `ANDI;
            21'b0010111_???_???????_??_??: decoder = `AUIPC;

            21'b0100011_000_???????_??_00: decoder = `SB1;
            21'b0100011_000_???????_??_01: decoder = `SB2;
            21'b0100011_000_???????_??_10: decoder = `SB3;
            21'b0100011_000_???????_??_11: decoder = `SB4;
            21'b0100011_001_???????_??_00: decoder = `SH1;
            21'b0100011_001_???????_??_10: decoder = `SH2;
            21'b0100011_010_???????_??_00: decoder = `SW;

            21'b0110011_000_0000000_??_??: decoder = `ADD;
`ifndef NO_MUL
            21'b0110011_000_0000001_??_??: decoder = `MUL;
`endif
            21'b0110011_000_0100000_??_??: decoder = `SUB;
            21'b0110011_001_0000000_??_??: decoder = `SLL;
`ifndef NO_MUL
            21'b0110011_001_0000001_??_??: decoder = `MULH;
`endif
            21'b0110011_010_0000000_??_??: decoder = `SLT;
`ifndef NO_MUL
            21'b0110011_010_0000001_??_??: decoder = `MULHSU;
`endif
            21'b0110011_011_0000000_??_??: decoder = `SLTU;
`ifndef NO_MUL
            21'b0110011_011_0000001_??_??: decoder = `MULHU;
`endif
            21'b0110011_100_0000000_??_??: decoder = `XOR;
`ifndef NO_DIV
            21'b0110011_100_0000001_??_??: decoder = `DIV;
`endif
            21'b0110011_101_0000000_??_??: decoder = `SRL;
`ifndef NO_DIV
            21'b0110011_101_0000001_??_??: decoder = `DIVU;
`endif
            21'b0110011_101_0100000_??_??: decoder = `SRA;
            21'b0110011_110_0000000_??_??: decoder = `OR;
`ifndef NO_DIV
            21'b0110011_110_0000001_??_??: decoder = `REM;
`endif
            21'b0110011_111_0000000_??_??: decoder = `AND;
`ifndef NO_DIV
            21'b0110011_111_0000001_??_??: decoder = `REMU;
`endif

            21'b0110111_???_???????_??_??: decoder = `LUI;

            21'b1100011_00?_???????_??_??: decoder = `BR;
            21'b1100011_1??_???????_??_??: decoder = `BR;

            21'b1100111_000_???????_??_??: decoder = `JALR;
            21'b1101111_???_???????_??_??: decoder = `JAL;

            default: decoder = `ERROR;
        endcase
    endfunction

    assign decoded_instruction = decoder(instruction[6:0], instruction[14:12], instruction[31:25], source_address_i, source_address_s);

endmodule
