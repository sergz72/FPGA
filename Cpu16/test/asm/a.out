00040000 // 0000 start:	jmp l1
ffffff5d // 0001 	mov r255, $FFFF
00fffff1 // 0002 	out [r255], r255 ; clear interrupt flag
00000050 // 0003 	reti
0000005f // 0004 l1:	hlt
00070020 // 0005 	call l2
00000000 // 0006 	jmp start
0000005d // 0007 l2:	mov r0, 0
00010082 // 0008 	inc r0
5555015d // 0009 	mov r1, $5555
ffff0182 // 000a 	dec r1
00010161 // 000b 	neg r1, r1
000100f1 // 000c 	out [r1], r0
000102f0 // 000d 	in  r2, [r1]
00010282 // 000e 	inc r2
02000062 // 000f 	add r0, r0, r2
000100f1 // 0010 	out [r1], r0
00010084 // 0011 	sub r0, 1
000100f1 // 0012 	out [r1], r0
80000089 // 0013 	or  r0, $8000
000100f1 // 0014 	out [r1], r0
7fff0088 // 0015 	and r0, $7FFF
000100f1 // 0016 	out [r1], r0
5555008a // 0017 	xor r0, $5555
000100f1 // 0018 	out [r1], r0
5555015d // 0019 	mov r1, $5555
aaaa005d // 001a 	mov r0, $AAAA
0001026c // 001b 	mul r2, r1, r0
0000035a // 001c 	mov r3, alu_out_2
000102f1 // 001d 	out [r1], r2
000103f1 // 001e 	out [r1], r3
0302006d // 001f 	div r0, r2, r3 ; r0 = r2:r3/r0
0000015a // 0020 	mov r1, alu_out_2
000100f1 // 0021 	out [r1], r0
000101f1 // 0022 	out [r1], r1
0001015d // 0023 	mov r1, $1
86a5005d // 0024 	mov r0, $86A5
000a025d // 0025 	mov r2, 10
0100026e // 0026 	rem r2, r0, r1; r2 = r1:r0 % r2
000102f1 // 0027 	out [r1], r2
00000040 // 0028 	ret
